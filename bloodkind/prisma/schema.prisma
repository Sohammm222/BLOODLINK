// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  clerkUserId   String         @unique
  email         String         @unique
  name          String?
  phone         String?        @unique
  imageUrl      String?
  bloodGroup    BloodGroup?
  isDonor       Boolean        @default(false)
  donorProfile  DonorProfile?
  requests      BloodRequest[]
  donations     Donation[]
  location      Location?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model DonorProfile {
  id            String     @id @default(uuid())
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  isAvailable   Boolean    @default(true)
  lastDonatedAt DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("donor_profiles")
}

model BloodRequest {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bloodGroup     BloodGroup
  unitsNeeded    Int
  reason         String?
  location       String
  isFulfilled    Boolean        @default(false)
  status         RequestStatus  @default(PENDING)
  createdAt      DateTime       @default(now())
  fulfilledAt    DateTime?
  donations      Donation[]

  @@index([userId])
  @@map("blood_requests")
}

model Donation {
  id          String       @id @default(uuid())
  userId      String
  requestId   String
  donatedAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  request     BloodRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([requestId])
  @@map("donations")
}

model Location {
  id         String    @id @default(uuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  city       String
  state      String
  country    String
  latitude   Float
  longitude  Float
  updatedAt  DateTime  @updatedAt

  @@map("locations")
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum RequestStatus {
  PENDING
  MATCHED
  FULFILLED
  CANCELLED
}
